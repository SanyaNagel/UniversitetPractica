package sample.ObjectMap;

import javafx.scene.paint.Color;
import sample.Peoples.People;

import java.util.ArrayList;

public class Corridor {
    public Corridor(int x, int y, int width, int height){
        coordX = x;
        coordY = y;
        _width = width;
        _height = height;
        mapCorridor = new int[width][height];
        for(int i = 0; i < width; i++)
            for(int j = 0; j < height; j++)
                if( (i == 0 || j == 0) || (i == _width-1 || j == _height-1))
                    mapCorridor[i][j] = 1;
                else
                    mapCorridor[i][j] = 0;
    }

    public Corridor(int x, int y, int width, int height, Corridor addCorridor){
        _listCorridor.add(addCorridor);
        mapCorridor = new int[width][height];
        coordY = y; coordX = x;
    }

    //–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫–æ—Ä–∏–¥–æ—Ä
    public void setCorridor(Corridor addCorridor) {
        _listCorridor.add(addCorridor);
    }

    //–î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ—Ä–∏–¥–æ—Ä –∏ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ–º —ç—Ç–∏ –º–µ—Å—Ç–∞
    public void setSell(Sell sell){
        for(int i = sell.getCoordX(); i < sell.getWidth()+sell.getCoordX(); i++)
            for(int j = sell.getCoordY(); j < sell.getCoordY()+sell.getHeight(); j++)
                mapCorridor[i-coordX][j-coordY] = 4;

            _listObject.add(sell);
    }

    public void setPrint(Print print){
        for(int i = print.getCoordX(); i < print.getWidth()+print.getCoordX(); i++)
            for(int j = print.getCoordY(); j < print.getCoordY()+print.getHeight(); j++)
                mapCorridor[i-coordX][j-coordY] = 2;

            _listObject.add(print);
    }
    
    //–î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ—Ä–∏–¥–æ—Ä
    public void setPeople(People people){

        for(int i = 0; i < get_width(); i++)
            for(int j = 0; j < get_height(); j++)
                if((mapCorridor[i][j] == 5) && (allowCoordPeople(i,j) == true))
                    people.setCoordinate(i,j);

        System.out.println("ƒÓ·‡‚ÎÂÌËÂ ˜ÂÎËÍ‡");
        _listPeople.add(people);
        paintPeople(people);
    }
    private boolean allowCoordPeople(int x, int y) {
        for(People people: _listPeople)
            if(people.getX() == x && people.getY() == y)
                return false;
        return true;
    }

    public void paintPeople(People people) {
    	if(people.notDrawing == this)
    		return;
    	if(mapCorridor[people.getX()][people.getY()] != 5)
        	mapCorridor[people.getX()][people.getY()] = 6;
	}
    public void paintNullPeople(People people) {
    	if(people.notDrawing == this)
    		return;
    	if(mapCorridor[people.getX()][people.getY()] != 5)
    		mapCorridor[people.getX()][people.getY()] = 0;
	}
    //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    public void updateTick(){
    	ArrayList<People> peopleDelet = new ArrayList<People>();
    	for(People people: _listPeople){
            boolean next = false;
        	if(people.come == true) {
	        	if(people.getX() < get_width()-1){                  //–ï—Å–ª–∏ –º—ã –Ω–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞, —Ç–æ
	            	paintNullPeople(people);
	            	people.setCoordinate(people.getX() + people.getSpeed());   //–ü–µ—Ä–µ–º–µ—â–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –æ–¥–∏–Ω –≤–ø–µ—Ä—ë–¥
	            	System.out.println("œÂÂıÓ‰ËÏ");
	            }
	            else{   //–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ—Ä–∏–¥–æ—Ä
	                for (Corridor corridor: _listCorridor) {
	                	if (people.getNextPath() == corridor) {  //–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–∏–¥–æ—Ä
	                        people.setCoordinate(0, 1);//people.getY()); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ–ª–æ–≤–µ–∫—É –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ
	                        corridor.setPeople(people);    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
	                    }
	                }
	                people.nextCorridor();  //–£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—Ä–∏–¥–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
	                people.notDrawing = this;
	                peopleDelet.add(people); //–£–¥–∞–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞ —Å —ç—Ç–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ—à—ë–ª –≤ —Å–ª–µ–¥—É—é—â–∏–π
	            }
	        	paintPeople(people);	//ŒÚÔ‡‚ÎˇÂÏ Ì‡ ÔÂÂËÒÓ‚ÍÛ
	        	System.out.println("œÂÂËÒÓ‚Í‡");
        	
        	}
        }
    	for(People people: peopleDelet)
    	{
    		people.notDrawing = null;
    		_listPeople.remove(people); //–£–¥–∞–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞ —Å —ç—Ç–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–µ—Ä–µ—à—ë–ª –≤ —Å–ª–µ–¥—É—é—â–∏–π
    	}
    	peopleDelet.clear();
        
    }

    public int getDegree(){
        return degree;
    }

    public boolean getIsCheked(){
        return isChecked;
    }

    public int setDegree(int degree) {
        if(degree != -1) {
            if (degree < this.degree)
                this.degree = degree;
        }
        else{
            this.degree = degree;
        }
        return degree;
    }

    //–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    public void recirseDeicstra(int lngthPath, Corridor prev){
        this.isChecked = true;  //–ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é

        Corridor minDegree = null;
        for(Corridor corridor: _listCorridor) {
            if(corridor != prev) {
                minDegree = corridor;  //–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                break;
            }
        }
        if(minDegree == null) return;   //–ï—Å–ª–∏ –≤—Å–µ —É–∑–ª—ã –∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ –≤—ã—Ö–æ–¥–∏–º

        //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –≤–µ—Ä—à–∏–Ω –∏ –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—à–∏–Ω—É
        for(Corridor corridor: _listCorridor){
            if(corridor != prev && corridor.isChecked == false && minDegree.getDegree() > corridor.setDegree(lngthPath+ get_width()));
                minDegree = corridor;
        }

        //–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ—ë
        minDegree.recirseDeicstra(degree+ get_width(),this);
    }

    public Corridor readyPath(int sum){
        for(Corridor corridor: _listCorridor){
            if(sum - get_width() == corridor.getDegree()){
                return corridor;
            }
        }
        return null;
    }
    public int getCoordX() {
        return coordX;
    }

    public int getCoordY() {
        return coordY;
    }

    
    //–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—Ç –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç—Ç–æ–º—É –∫–æ—Ä–∏–¥–æ—Ä—É + –≤–ª–∞–∑–∏—Ç –ª–∏?
    public boolean belongsCoord(ObjectMap objectMap){
        if(coordX+ get_width() >= objectMap.getCoordX()+objectMap.getWidth() && coordY+ get_height() >= objectMap.getCoordY()+objectMap.getHeight())
            return true;
        else
            return false;
    }
    public boolean belongsCoordC(int x, int y, int widthC, int heightC){
        if(coordX+ get_width() >= x+widthC && coordY+ get_height() >= y+heightC)
            return true;
        else
            return false;
    }

    //–ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–Ω–¥–∞–ª–µ–∂–∞—Ç –∫–æ—Ä–∏–¥–æ—Ä—É
    public boolean belongsCoord(int x, int y, int width, int height){
        if(coordX+ get_width() >= x+width && coordY+ get_height() >= y+height)
            return true;
        else
            return false;
    }
    public void setInput(int x, int y, int width, int height){
        for(int i = x-coordX; i < width; i++)
            for(int j = y-coordY; j <= height; j++)
                mapCorridor[i][j] = 5;
            input = true;
    }
    public int get_width() {
        return _width;
    }

    public int get_height() {
        return _height;
    }

    public int[][] getMapCorridor(){
        return mapCorridor;
    }

    private int[][] mapCorridor;    //–ö–∞—Ä—Ç–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∫–ª–µ—Ç–æ–∫ - –±–∏—Ç–æ–≤–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    private ArrayList<Corridor> _listCorridor = new ArrayList<Corridor>();

    private ArrayList<Object> _listObject = new ArrayList<Object>();           //–°—Ç–æ–ª–æ–≤—ã–µ, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø–µ—á–∞—Ç–∏
    private ArrayList<People> _listPeople = new ArrayList<People>();           //–õ—é–¥–∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö
    private int _width;
    private int _height;
    private int coordX;
    private int coordY;
    public boolean input = false;

    //–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–π–∫—Å—Ç—Ä—ã
    private int degree = -1;
    private boolean isChecked = false;



}
